% function [amp_um, amp_px, max_to_zero, min_to_zero] = strain_amp_calc_full_cycle_v1(folder, freq)
%
% Description:
% Calculates amplitude in um and px for curve of points generated by
% matPIV. Takes folder of tif files and frequency of oscillation as inputs.
% Expects one full shear cycle with zeros on each side.
% 
% Author: Eric Schwen
% Date: 3-16-18
% Mod History:
%
% sample data inputs
freq = 0.3333;
folder = 'D:\Xerox Data\30um gap runs\10-10-18 data\1.4V\xy-ts-pre';

% Import data
window = '512x32';
strainPathX = [folder '_drift_' window '\v_fieldX.csv'];
shift_x = xlsread(strainPathX);

% % include y path if you want
% strainPathY = [folder '_drift_' window '\v_fieldY.csv'];
% shift_y = xlsread(strainPathY);

time_path = [folder '_drift_' window '\timestamps.csv'];
timesteps = xlsread(time_path);


% % Plot shift vs time
% figure;
% plot(timesteps(2:end), shift_x ,'b:o');
% plot(1:length(timesteps(2:end)), shift_x ,'b:o');
% title('Shift vs time');
% xlabel('Time (s)');
% ylabel('Shift (pixels)');
% % axis([0 max(timesteps) -5 5]);

% Calculate total shift
shift_sum_x = zeros(length(shift_x),1);
shift_sum_x(1) = shift_x(1);
for i = 2:length(shift_x)
    shift_sum_x(i) = shift_x(i) + shift_sum_x(i-1);
end

% % Plot total shift vs time
% figure;
% plot(timesteps(2:end), shift_sum_x ,'b:o');
% title('Shift vs time');
% xlabel('Time (s)');
% ylabel('Shift (pixels)');

%% trim shift sum to just curve

% % Automatic trim settings
% Find initial and final zero position
initial_zero = mean(shift_sum_x(1:30));
final_zero = mean(shift_sum_x(length(shift_sum_x)-30:length(shift_sum_x)));
avg_zero = mean([initial_zero, final_zero]);

% estimate amplitude
amp_est = (max(shift_sum_x)-min(shift_sum_x))/2;

% find first trim cutoff. Could probably use while loop.
% use double the buffer for lower part.
for i = 1:length(shift_sum_x)
    if abs(shift_sum_x(i)) > abs(initial_zero) + amp_est/10
        start_cut = i;
        break
    end
end

for i = length(shift_sum_x):-1:1
    if abs(shift_sum_x(i)) > abs(final_zero) + amp_est/10
        last_cut = i;
        break
    end
end


shift_sum_x_trimmed = shift_sum_x(start_cut: last_cut);
timesteps_trimmed = timesteps(1+start_cut: last_cut+1);

% figure;
% hold on
% plot(timesteps(2:end), shift_sum_x,'b:o');
% plot(timesteps_trimmed, shift_sum_x_trimmed ,'r:o');
% title('Position vs time');
% xlabel('Time (s)');
% ylabel('x-position (pixels)');
% xlim([0 max(timesteps)])
% hold off

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% fit with frequency restricted to reasonable range
shift_sum_x_trimmed_zeroed = shift_sum_x_trimmed - avg_zero;
sine_fit_zeroed = fit(timesteps_trimmed, shift_sum_x_trimmed_zeroed, 'sin1',...
    'Lower',[-Inf, 2*pi*freq*0.9, -Inf],...
    'Upper', [Inf, 2*pi*freq*1.1, Inf]);

% figure;
% hold on
% plot(timesteps_trimmed, shift_sum_x_trimmed_zeroed ,'b:o');
% plot(sine_fit_zeroed, 'g')
% title('Position vs time');
% xlabel('Time (s)');
% ylabel('x-position (pixels)');
% hold off


figure;
hold on
plot(timesteps(2:end), shift_sum_x - avg_zero ,'b:o');
plot(timesteps_trimmed, shift_sum_x_trimmed_zeroed ,'r:o');
plot(sine_fit_zeroed, 'k')
title('Position vs time');
xlabel('Time (s)');
ylabel('x-position (pixels)');
grid on
hold off

sine_fit_zeroed;
coeffs = coeffvalues(sine_fit_zeroed);
conf_ints = confint(sine_fit_zeroed);
amp_px = coeffs(1);
amp_um = coeffs(1)*0.127
confidence = conf_ints(:,1)*0.127;

% other basic calculation of amplitude: minimum to zero and zero to max
min_to_zero = avg_zero - mean(shift_sum_x(1:30));
max_to_zero = max(shift_sum_x) - avg_zero;

% end
